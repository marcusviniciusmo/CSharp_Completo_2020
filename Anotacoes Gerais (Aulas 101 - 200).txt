======================================== AULA 101 - E SE EU ESQUECER DE COLOCAR A MENSAGEM NO COMMIT? - EDITOR VIM =========================================

Se você esquecer de especificar a mensagem do commit, o Git Bash vai abrir o VIM para a edição.
Para sair do VIM, tecle 'ESC' e depois digite:
	:q!

========================================= AULA 102 - E SE EU ME PERDER E QUISER VOLTAR AO ESTADO DO COMMIT ATUAL? ==========================================

Descartar todas as modificações, voltando ao estado do commit atual:
	git clean -df
	git checkout -- .

=========================================== AULA 103 - E SE EU QUISER DESFAZER O ÚLTIMO COMMIT? - COMANDO RESET ============================================

- Remover o último commit mantendo as alterações nos arquivos:
	git reset --soft HEAD~1

- Remover o último commit INCLUSIVE as alterações nos arquivos:
	git reset --hard HEAD~1

========================================= AULA 104 - E SE EU QUISER SOMENTE DAR UMA OLHADA EM UMA VERSÃO ANTERIOR? =========================================

- Navegar entre commits, alterando os arquivos temporariamente:
	git checkout hash_do_commit

- Voltar para o último commit:
	git checkout nome_da_branch

======================================== AULA 107 - ASSOCIANDO O REPOSITÓRIO LOCAL AO REPOSITÓRIO REMOTO DO GITHUB =========================================

- Associar nosso repositório local ao repositório remoto, dando o apelido de "origin" a ele:
	git remote add origin URI_do_repositorio_remoto

- Associar o repositório local a um repositório remoto, porém mantendo o mesmo apelido:
	git remote set-url origin URI_do_repositorio_remoto

================================================ AULA 108 - TRANSFERINDO O REPOSITÓRIO LOCAL PARA O GITHUB =================================================

- Transferindo o repositório local para o Github:
	git push -u origin master

NOTA: se você usou a opção -u, nas próximas vezes quer for subir o branc master, basta fazer:
	git push

======================================= AULA 109 - A IMPORTÂNCIA DE SE CONFIGURAR CORRETAMENTE O USUÁRIO NO GIT BASH =======================================

git config --global user.name "Seu Nome"
git config --global user.email "Seu E-mail"

============================================= AULA 110 - TRANSFERINDO UM REPOSITÓRIO REMOTO PARA SEU COMPUTADOR ============================================

- Copiar o repositório, inclusive o histórico de commits:
	git clone URI_do_repositorio_remoto

Atenção: simplesmente copiar os arquivos NÃO traz o histórico de commits!

======================================================= AULA 111 - ATUALIZANDO SEU REPOSITÓRIO LOCAL =======================================================

- Comando para atualizar seu repostitório local:
	git pull origin master

================================================================== AULA 115 - ENUMERAÇÕES ==================================================================

* Notação UML para Enumerações deve-se criar um estereótipo (Ex: <<enum>> ou <<enum constant>>):
 _____________________________				 _____________________________________________
|           <<enum>>          |				|                  <<enum>>                   |
|         OrderStatus         |				|                 OrderStatus                 |
|-----------------------------|				|---------------------------------------------|
| - PENDING_PAYMENT : int = 0 |			OU	| - <<enum constant>> PENDING_PAYMENT : int 0 |
| - PROCESSING: int = 1       |				| - <<enum constant>> PROCESSING : int 1      |
| - SHIPPED : int = 2 	      |				| - <<enum constant>> SHIPPED : int 2 	      |
| - DELIVERED: int = 3 	      |				| - <<enum constant>> DELIVERED : int 3       |
 -----------------------------				 ---------------------------------------------

============================================================ AULA 127 - UPCASTING E DOWNCASTING ============================================================

Account acc = new Account(1001, "Alex", 0.0);
BusinessAccount bAcc = new BusinessAccount(1002, "Maria", 0.0, 500.0);

// UPCASTING - Conversão da subclasse para a superclasse.

	Account acc1 = bAcc;
	Account acc2 = new BusinessAccount(1003, "Bob", 0.0, 200.0);
	Account acc3 = new SavingsAccount(1004, "Anna", 0.0, 0.01);

// DOWNCASTING - Conversão da superclasse para a subclasse.

	// acc2 foi instanciado com BusinessAccount, só que está em uma variável do tipo Account.
	BusinessAccount acc4 = (BusinessAccount)acc2;
	acc4.Loan(100.0);
	// acc2.Loan(100.0);

	// O compilador não gera erro, porém há em tempo de execução, não sendo possível converter SavingsAccount para BusinessAccount
	// BusinessAccount acc5 = (BusinessAccount)acc3;

* Downcasting é uma operação insegura, e é necessário testar o objeto para saber se é o tipo desejado.
	Pra testar, utiliza-se o operador "is".
		if (acc3 is BusinessAccount)
            	{
                	BusinessAccount acc5 = (BusinessAccount)acc3;
                	acc5.Loan(200.0);
                	Console.WriteLine("Loan!");
            	}

* Há duas formas de fazer casting:
	- BusinessAccount acc5 = (BusinessAccount)acc3;
	- BusinessAccount acc5 = acc3 as BusinessAccount;